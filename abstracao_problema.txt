ABSTRAÇÃO DO PROBLEMA - ADS

1. Entenda o objetivo do problema: O drone deve visitar uma lista de CEPs em Curitiba para tirar fotos, começando e terminando no CEP 82821020 (Unibrasil), visitando cada CEP apenas uma vez (exceto o inicial/final). Minimize o custo total, medido pelo tempo de voo e número de paradas para recarga. Todas as visitas devem ocorrer em até 7 dias, com voos apenas entre 06:00:00 e 19:00:00. Nota: Use um algoritmo genético para otimizar a ordem de visitas, horários e velocidades.

2. Colete e organize os dados de entrada: Obtenha a lista de CEPs e coordenadas (latitude/longitude) do arquivo fornecido pelo professor. Extraia as tabelas de previsão de ventos para os 7 dias (velocidade em nós/km/h e direção, ignorando rajadas). Converta a autonomia base do drone para segundos: 1 hora, 23 minutos e 20 segundos = 5000 segundos (aplique fator de correção 0.93 para condições reais de Curitiba, se sua matrícula começar com 2). Exemplo: Armazene ventos em uma estrutura como dicionário por dia e hora.

3. Implemente o cálculo de distância entre coordenadas: Use a fórmula de Haversine para calcular a distância em km entre dois pontos (latitude/longitude em graus). Fórmula: a = sin²(Δφ/2) + cos(φ1) * cos(φ2) * sin²(Δλ/2); c = 2 * atan2(√a, √(1-a)); d = R * c (R = 6371 km). Nota: Isso dá a distância em linha reta; implemente em código para todos os pares de CEPs.

4. Modele o efeito do vento na velocidade e autonomia: Calcule a velocidade efetiva do drone considerando o vento (direção e velocidade da tabela, fixa durante o trecho baseado na hora de partida). Use o exemplo dado: componentes vetoriais (v_x, v_y) para drone e vento, então velocidade efetiva = sqrt(v_gx² + v_gy²), onde v_g é a soma vetorial. A autonomia diminui com velocidades acima de 36 km/h usando A(v) = 5000 * (36/v)^2. Consuma 72 segundos por parada (foto ou recarga). Nota: Velocidade do drone deve ser múltiplo de 4, até 96 km/h, e no mínimo 10 m/s (se matrícula começar com 2).

5. Calcule o tempo de voo e consumo de bateria por trecho: Para cada trecho, calcule tempo em segundos: distância / velocidade efetiva (em km/s), arredondando para cima se fracionado (se matrícula começar com 2). Subtraia o consumo de bateria baseado na velocidade (modo normal ou esportivo) e adicione 72s por parada. Se bateria insuficiente, force recarga no CEP atual. Custo de recarga: R$80 por pouso (se matrícula começar com 2), mais R$80 se pouso após 17:00 (se matrícula começar com 2).

6. Defina a representação genética (cromossomo): Represente a solução como uma permutação da ordem de CEPs (ex.: Path Representation), incluindo dias, horários de partida e velocidades por trecho. Sugestões: Use lista de índices de CEPs para ordem, mais vetores para dia/hora/velocidade. Garanta que o caminho comece e termine no Unibrasil, sem repetições. Exemplo: Cromossomo = [ordem CEPs] + [dias] + [horas] + [velocidades].

7. Implemente a função de fitness: Avalie cada solução calculando tempo total de voo + número de recargas (penalize soluções inválidas, como bateria zero em voo ou voo fora do horário). Some custos adicionais (se aplicável). Menor valor = melhor fitness. Nota: Penalize fortemente violações como drone sem bateria ou visitas além de 7 dias; use reparo se possível.

8. Configure os operadores genéticos: Inicie população aleatória (tamanho sugerido: 50-100). Use seleção por torneio ou roleta. Crossover: um ponto ou uniforme para permutações. Mutação: troca, inversão ou deslocamento (taxa 0.01-0.1). Elitismo: Mantenha os melhores indivíduos. Exemplo: Para ordem de CEPs, use crossover PMX (Partially Mapped Crossover) para evitar repetições.

9. Execute o algoritmo genético: Rode por gerações (ex.: 100-500) até convergência. Para cada indivíduo, simule o roteiro completo: calcule trajetos dia a dia, verificando bateria, ventos e horários. Ajuste parâmetros (tamanho população, taxa mutação) via testes. Nota: Garanta soluções válidas; se inválida, repare ou penalize.

10. Gere o arquivo de saída CSV: Para a melhor solução, crie CSV com colunas: CEP inicial, Latitude inicial, Longitude inicial, Dia do voo, Hora inicial, Velocidade, CEP final, Latitude final, Longitude final, Pouso (SIM/NÃO), Hora final. Cada linha é um trecho. Exemplo: Linha para voo de A para B com pouso.


-------

Crie testes unitários: Desenvolva pelo menos 3 testes (cobertura mínima 20% se matrícula começar com 2): teste distância Haversine, efeito vento em velocidade, consumo bateria por trecho. Use frameworks como pytest (Python) e meça cobertura.
